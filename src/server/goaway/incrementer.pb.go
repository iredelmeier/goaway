// Code generated by protoc-gen-go. DO NOT EDIT.
// source: incrementer.proto

package goaway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IncrementRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementRequest) Reset()         { *m = IncrementRequest{} }
func (m *IncrementRequest) String() string { return proto.CompactTextString(m) }
func (*IncrementRequest) ProtoMessage()    {}
func (*IncrementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_incrementer_e64983f503022780, []int{0}
}
func (m *IncrementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementRequest.Unmarshal(m, b)
}
func (m *IncrementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementRequest.Marshal(b, m, deterministic)
}
func (dst *IncrementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementRequest.Merge(dst, src)
}
func (m *IncrementRequest) XXX_Size() int {
	return xxx_messageInfo_IncrementRequest.Size(m)
}
func (m *IncrementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementRequest proto.InternalMessageInfo

type IncrementReply struct {
	Count                int64    `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementReply) Reset()         { *m = IncrementReply{} }
func (m *IncrementReply) String() string { return proto.CompactTextString(m) }
func (*IncrementReply) ProtoMessage()    {}
func (*IncrementReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_incrementer_e64983f503022780, []int{1}
}
func (m *IncrementReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementReply.Unmarshal(m, b)
}
func (m *IncrementReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementReply.Marshal(b, m, deterministic)
}
func (dst *IncrementReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementReply.Merge(dst, src)
}
func (m *IncrementReply) XXX_Size() int {
	return xxx_messageInfo_IncrementReply.Size(m)
}
func (m *IncrementReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementReply.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementReply proto.InternalMessageInfo

func (m *IncrementReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*IncrementRequest)(nil), "goaway.IncrementRequest")
	proto.RegisterType((*IncrementReply)(nil), "goaway.IncrementReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IncrementerClient is the client API for Incrementer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IncrementerClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementReply, error)
}

type incrementerClient struct {
	cc *grpc.ClientConn
}

func NewIncrementerClient(cc *grpc.ClientConn) IncrementerClient {
	return &incrementerClient{cc}
}

func (c *incrementerClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementReply, error) {
	out := new(IncrementReply)
	err := c.cc.Invoke(ctx, "/goaway.Incrementer/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Incrementer service

type IncrementerServer interface {
	Increment(context.Context, *IncrementRequest) (*IncrementReply, error)
}

func RegisterIncrementerServer(s *grpc.Server, srv IncrementerServer) {
	s.RegisterService(&_Incrementer_serviceDesc, srv)
}

func _Incrementer_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementerServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goaway.Incrementer/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementerServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Incrementer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goaway.Incrementer",
	HandlerType: (*IncrementerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _Incrementer_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incrementer.proto",
}

func init() { proto.RegisterFile("incrementer.proto", fileDescriptor_incrementer_e64983f503022780) }

var fileDescriptor_incrementer_e64983f503022780 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcc, 0x4b, 0x2e,
	0x4a, 0xcd, 0x4d, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0xcf, 0x4f, 0x2c, 0x4f, 0xac, 0x54, 0x12, 0xe2, 0x12, 0xf0, 0x84, 0x49, 0x06, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x28, 0xa9, 0x71, 0xf1, 0x21, 0x89, 0x15, 0xe4, 0x54, 0x0a, 0x89, 0x70, 0xb1,
	0x26, 0xe7, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x38, 0x46, 0x7e,
	0x5c, 0xdc, 0x9e, 0x08, 0x83, 0x85, 0xec, 0xb9, 0x38, 0xe1, 0x5c, 0x21, 0x09, 0x3d, 0x88, 0x05,
	0x7a, 0xe8, 0xa6, 0x4b, 0x89, 0x61, 0x91, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x3b,
	0xcd, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x0c, 0xdf, 0x4f, 0xaf, 0x00, 0x00, 0x00,
}
